name: Combined Deployment

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        
  build-backend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create deployment package
      run: |
        mkdir -p ../deploy
        cp -r * ../deploy/
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: deploy/
        
  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: backend-build
    
    # Option 1: Deploy to a VPS or dedicated server using SSH
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Create deployment directories if they don't exist
          mkdir -p ~/app/frontend
          mkdir -p ~/app/backend
          
          # Clean up existing files
          rm -rf ~/app/frontend/*
          rm -rf ~/app/backend/*
          
          # Copy new files
          scp -r ${{ github.workspace }}/frontend-build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/app/frontend/
          scp -r ${{ github.workspace }}/backend-build/* ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/app/backend/
          
          # Install backend dependencies
          cd ~/app/backend
          python -m pip install -r requirements.txt
          
          # Restart services
          sudo systemctl restart nginx
          sudo systemctl restart your-backend-service
    
    # Option 2: Deploy using Docker
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2
    #
    # - name: Login to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    #
    # - name: Build and push frontend
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: ./frontend-build
    #     push: true
    #     tags: yourusername/frontend:latest
    #
    # - name: Build and push backend
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: ./backend-build
    #     push: true
    #     tags: yourusername/backend:latest
    #
    # - name: Deploy to server
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSH_HOST }}
    #     username: ${{ secrets.SSH_USERNAME }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     port: ${{ secrets.SSH_PORT }}
    #     script: |
    #       cd ~/app
    #       docker-compose pull
    #       docker-compose up -d
